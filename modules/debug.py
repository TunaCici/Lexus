# ----------------------------------------------------------------------------------

# Form implementation generated from reading ui file 'debug.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# ----------------------------------------------------------------------------------


from PyQt5 import QtCore, QtGui, QtWidgets, QtTest
from PIL import Image
from PIL.ImageQt import ImageQt
import os
import glob
import stat
import sys

if __name__ == "modules." + os.path.basename(__file__)[:-3]:
    # importing from outside the package
    from modules import config
    from modules import camera
    from modules import logger
    from modules import voice_command
    from modules import ai
else:
    # importing from main and inside the package
    import config
    import camera
    import logger
    import voice_command
    import ai

class DebugScreen(object):
    
    def ai_start(self):
        if config.AI_RUNNING == True:
            self.ai_obj = ai.Lexus_AI()
            self.item6.setText(self._translate("ProjectLexusDebugScreen", "YAPAY ZEKA : ACIK"))

    def voice_start(self):
        self.voice_obj = voice_command.VoiceCommander()

        if config.is_playing == True:
            self.item4.setText(self._translate("ProjectLexusDebugScreen", "SES : ACIK"))
    
    def logger_start(self):
        if config.IS_LOGGER_RUNNING == True:
            logger.LexusLogger()

        self.file_log = open(config.PROJECT_DIR + "/logs/lexuslogfile.txt")
    
    def save_function(self):
        try:
            self.obje.save()

        except:
            print("Camera is not opened.")

    def start(self):
        config.CAMERA_RUNNING = True
        config.IS_LOGGER_RUNNING = True
        config.is_playing = True

        self.item.setText(self._translate("ProjectLexusDebugScreen", "KAMERA :  ACIK"))
        self.item4.setText(self._translate("ProjectLexusDebugScreen", "SES : ACIK"))
        self.obje = camera.Camera()
        self.voice_start()
        self.ai_start()
        self.update()
    
    def close(self):
        try:
            config.CAMERA_RUNNING = False
            config.IS_LOGGER_RUNNING = False
            config.is_playing = False
            self.item.setText(self._translate("ProjectLexusDebugScreen", "KAMERA :  DEVRE DISI"))
            self.item4.setText(self._translate("ProjectLexusDebugScreen", "SES : DEVRE DISI"))
            self.item6.setText(self._translate("ProjectLexusDebugScreen", "YAPAY ZEKA : DEVRE DISI"))

            self.obje.videoCaptureObject.release()
            
            self.obje.photo_no = 0

            self.i = 0
            config.LINE_NUMBER = 0

            self.logs.clear()

            self.file_log.close()
    
        except:
            print("An Error Occured...")

        try:
            self.files = glob.glob(config.PROJECT_DIR + "/photos/")

            for file in self.files:
                os.chmod(file, mode=stat.S_IWRITE)
                os.remove(file)

        except PermissionError as p:
            print("Permission Error Occured...")

    def get_picture(self):
        return self.picture_list[-1]

    def update(self):
        while(config.CAMERA_RUNNING == True and config.IS_LOGGER_RUNNING == True and self.obje.photo_no != config.PHOTO_NUMBER + 1):
            self.obje.update()
            QtTest.QTest.qWait(100)

            self.ambulance = 0
            self.bench = 0
            self.bicycle = 0
            self.bus = 0
            self.car = 0
            self.cat = 0
            self.chair = 0
            self.couch = 0
            self.dog = 0
            self.motorcycle = 0
            self.person = 0
            self.stop_sign = 0
            self.taxi = 0
            self.traffic_light = 0
            self.traffic_sign = 0

            self.picture = self.obje.get_frame()

            self.picture,self.detection_list = self.ai_obj.update(self.picture)

            self.picture_list = list()
            self.picture_list.append(self.picture)
            
            height, width, channel = self.get_picture().shape
            bytesPerLine = 3 * width
            self.qImg = QtGui.QImage(self.get_picture().data, width, height, bytesPerLine, QtGui.QImage.Format_RGB888)

            self.aiScreen.resize(config.RESIZE_X,config.RESIZE_Y)
            self.pixmap = QtGui.QPixmap(self.qImg)
            self.aiScreen.setPixmap(self.pixmap)

            for i in self.detection_list:
                print(i[0])

                if i[0] == "ambulance":
                    self.ambulance = self.ambulance + 1

                if i[0] == "bench":
                    self.bench = self.bench + 1

                if i[0] == "bicycle":
                    self.bicycle = self.bicycle + 1

                if i[0] == "bus":
                    self.bus = self.bus + 1

                if i[0] == "car":
                    self.car = self.car + 1

                if i[0] == "cat":
                    self.cat = self.cat + 1

                if i[0] == "chair":
                    self.chair = self.chair + 1

                if i[0] == "couch":
                    self.couch = self.couch + 1

                if i[0] == "dog":
                    self.dog = self.dog + 1

                if i[0] == "motorcycle":
                    self.motorcycle = self.motorcycle + 1

                if i[0] == "person":
                    self.person = self.person + 1
                    print(self.person)

                if i[0] == "stop sign":
                    self.stop_sign = self.stop_sign + 1

                if i[0] == "taxi":
                    self.taxi = self.taxi + 1

                if i[0] == "traffic light":
                    self.traffic_light = self.traffic_light + 1

                if i[0] == "traffic sign":
                    self.traffic_sign = self.traffic_sign + 1

            __sort = self.objects.isSortingEnabled()
            self.objects.setSortingEnabled(False)
            self.x1 = self.objects.item(0)
            self.x1.setText(self._translate("ProjectLexusDebugScreen","Ambulance: " + str(self.ambulance)))
            self.x2 = self.objects.item(1)
            self.x2.setText(self._translate("ProjectLexusDebugScreen","Bench: " + str(self.bench)))
            self.x3 = self.objects.item(2)
            self.x3.setText(self._translate("ProjectLexusDebugScreen","Bicycle: " + str(self.bicycle)))
            self.x4 = self.objects.item(3)
            self.x4.setText(self._translate("ProjectLexusDebugScreen","Bus: " + str(self.bus)))
            self.x5 = self.objects.item(4)
            self.x5.setText(self._translate("ProjectLexusDebugScreen","Car: " + str(self.car)))
            self.x6 = self.objects.item(5)
            self.x6.setText(self._translate("ProjectLexusDebugScreen","Cat: " + str(self.cat)))
            self.x7 = self.objects.item(6)
            self.x7.setText(self._translate("ProjectLexusDebugScreen","Chair: " + str(self.chair)))
            self.x8 = self.objects.item(7)
            self.x8.setText(self._translate("ProjectLexusDebugScreen","Couch: " + str(self.couch)))
            self.x9 = self.objects.item(8)
            self.x9.setText(self._translate("ProjectLexusDebugScreen","Dog: " + str(self.dog)))
            self.x10 = self.objects.item(9)
            self.x10.setText(self._translate("ProjectLexusDebugScreen","Motorcycle: " + str(self.motorcycle)))
            self.x11 = self.objects.item(10)
            self.x11.setText(self._translate("ProjectLexusDebugScreen","People: " + str(self.person)))
            self.x12 = self.objects.item(11)
            self.x12.setText(self._translate("ProjectLexusDebugScreen","Stop Sign: " + str(self.stop_sign)))
            self.x13 = self.objects.item(12)
            self.x13.setText(self._translate("ProjectLexusDebugScreen","Taxi: " + str(self.taxi)))
            self.x14 = self.objects.item(13)
            self.x14.setText(self._translate("ProjectLexusDebugScreen","Traffic Light: " + str(self.traffic_light)))
            self.x15 = self.objects.item(14)
            self.x15.setText(self._translate("ProjectLexusDebugScreen","Traffic Sign: " + str(self.traffic_sign)))
            self.objects.setSortingEnabled(__sort)


            QtTest.QTest.qWait(100)
            self.obje.photo_no = self.obje.photo_no + 1

            if self.obje.photo_no == config.PHOTO_NUMBER:
                self.obje.photo_no = 0
                self.obje.frame_list.clear()

            QtTest.QTest.qWait(100)

            self.logger_start()

            self.list_Lines = self.file_log.readlines()
            config.LINE_NUMBER = len(self.list_Lines)

            self.i = 0
            for i in range(config.LINE_NUMBER):
                self.logs.addItem(self.list_Lines[self.i])
                self.i = self.i + 1

    def goruntu_sec(self):
        try:
            self.filename = QtWidgets.QFileDialog.getOpenFileName(directory=config.PROJECT_DIR + "/photos/")
            self.path = self.filename[0]
            self.image = Image.open(self.path)
            self.image.show()

        except:
            print("No Picture Selected")

    def setupUi(self, ProjectLexusDebugScreen):
        ProjectLexusDebugScreen.setObjectName("ProjectLexusDebugScreen")
        ProjectLexusDebugScreen.resize(1080, 720)
        ProjectLexusDebugScreen.setMinimumSize(QtCore.QSize(0, 600))
        ProjectLexusDebugScreen.setMaximumSize(QtCore.QSize(800, 16777215))
        ProjectLexusDebugScreen.setFixedWidth(900)
        ProjectLexusDebugScreen.setFixedHeight(720)
        ProjectLexusDebugScreen.setStyleSheet("background-color: #ab9191;")
        self.centralwidget = QtWidgets.QWidget(ProjectLexusDebugScreen)
        self.centralwidget.setObjectName("centralwidget")
        self.baslaButton = QtWidgets.QPushButton(self.centralwidget)
        self.baslaButton.setGeometry(QtCore.QRect(320, 40, 111, 71))
        self.baslaButton.setObjectName("baslaButton")
        self.baslaButton.setStyleSheet("background-color : #ff9f8e")
        self.baslaButton.pressed.connect(self.start)
        self.durButton = QtWidgets.QPushButton(self.centralwidget)
        self.durButton.setGeometry(QtCore.QRect(320, 120, 111, 71))
        self.durButton.setObjectName("durButton")
        self.durButton.setStyleSheet("background-color : #ff9f8e")
        self.durButton.pressed.connect(self.close)
        self.goruntuSecButton = QtWidgets.QPushButton(self.centralwidget)
        self.goruntuSecButton.setGeometry(QtCore.QRect(320, 200, 111, 71))
        self.goruntuSecButton.setObjectName("goruntuSecButton")
        self.goruntuSecButton.setStyleSheet("background-color : #ff9f8e")
        self.goruntuSecButton.pressed.connect(self.goruntu_sec)
        self.saveButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveButton.setGeometry(QtCore.QRect(320, 280, 111, 71))
        self.saveButton.setObjectName("baslaButton")
        self.saveButton.setStyleSheet("background-color : #ff9f8e")
        self.saveButton.pressed.connect(self.save_function)
        self.modulSituations = QtWidgets.QListWidget(self.centralwidget)
        self.modulSituations.setGeometry(QtCore.QRect(10, 30, 200, 150))
        self.modulSituations.setObjectName("modulSituations")
        self.modulSituations.setStyleSheet("background-color : #d2c8c8")
        item = QtWidgets.QListWidgetItem()
        self.modulSituations.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.modulSituations.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.modulSituations.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.modulSituations.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.modulSituations.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.modulSituations.addItem(item)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 94, 16))
        self.label.setObjectName("label")
        self.label.setStyleSheet("font-weight : bold")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(350, 20, 54, 16))
        self.label_2.setObjectName("label_2")
        self.label_2.setStyleSheet("font-weight : bold")
        self.objects = QtWidgets.QListWidget(self.centralwidget)
        self.objects.setGeometry(QtCore.QRect(440, 370, 341, 192))
        self.objects.setObjectName("objects")
        self.objects.setStyleSheet("font-weight : bold")
        self.objects.setStyleSheet("background-color : #d2c8c8")
        self.objects.move(480,450)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        x1 = QtWidgets.QListWidgetItem()
        self.objects.addItem(x1)
        self.logs = QtWidgets.QListWidget(self.centralwidget)
        self.logs.setGeometry(QtCore.QRect(20, 370, 361, 192))
        self.logs.setObjectName("logs")
        self.logs.setStyleSheet("font-weight : bold")
        self.logs.setStyleSheet("background-color : #d2c8c8")
        self.logs.move(20,450)
        self.aiScreen = QtWidgets.QLabel(self.centralwidget)
        self.aiScreen.setGeometry(QtCore.QRect(510, 40, 261, 211))
        self.aiScreen.setObjectName("aiScreen")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(500, 20, 141, 16))
        self.label_4.setObjectName("label_4")
        self.label_4.setStyleSheet("font-weight : bold")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(20, 350, 47, 13))
        self.label_5.setObjectName("label_5")
        self.label_5.setStyleSheet("font-weight : bold")
        self.label_5.move(20,400)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(440, 350, 131, 16))
        self.label_6.setObjectName("label_6")
        self.label_6.setStyleSheet("font-weight : bold")
        self.label_6.move(480,400)
        ProjectLexusDebugScreen.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(ProjectLexusDebugScreen)
        self.statusbar.setObjectName("statusbar")
        ProjectLexusDebugScreen.setStatusBar(self.statusbar)

        self.retranslateUi(ProjectLexusDebugScreen)
        QtCore.QMetaObject.connectSlotsByName(ProjectLexusDebugScreen)

    def retranslateUi(self, ProjectLexusDebugScreen):
        self._translate = QtCore.QCoreApplication.translate
        ProjectLexusDebugScreen.setWindowTitle(self._translate("ProjectLexusDebugScreen", "Project Lexus Debug Screen"))
        self.baslaButton.setText(self._translate("ProjectLexusDebugScreen", "BASLA"))
        self.durButton.setText(self._translate("ProjectLexusDebugScreen", "DUR"))
        self.goruntuSecButton.setText(self._translate("ProjectLexusDebugScreen", "GORUNTU SEC"))
        self.saveButton.setText(self._translate("ProjectLexusDebugScreen", "KAYDET"))
        __sortingEnabled = self.modulSituations.isSortingEnabled()
        self.modulSituations.setSortingEnabled(False)
        self.item = self.modulSituations.item(0)
        self.item.setText(self._translate("ProjectLexusDebugScreen", "KAMERA :  DEVRE DISI"))
        self.item2 = self.modulSituations.item(1)
        self.item2.setText(self._translate("ProjectLexusDebugScreen", "TITRESIM : DEVRE DISI"))
        self.item3 = self.modulSituations.item(2)
        self.item3.setText(self._translate("ProjectLexusDebugScreen", "YAKINLIK : DEVRE DISI"))
        self.item4 = self.modulSituations.item(3)
        self.item4.setText(self._translate("ProjectLexusDebugScreen", "SES : DEVRE DISI"))
        self.item5 = self.modulSituations.item(4)
        self.item5.setText(self._translate("ProjectLexusDebugScreen", "KONROLCU : DEVRE DISI"))
        self.item6 = self.modulSituations.item(5)
        self.item6.setText(self._translate("ProjectLexusDebugScreen", "YAPAY ZEKA : DEVRE DISI"))
        self.modulSituations.setSortingEnabled(__sortingEnabled)
        self.label.setText(self._translate("ProjectLexusDebugScreen", "MODUL DURUMU"))
        self.label_2.setText(self._translate("ProjectLexusDebugScreen", "ISLEMLER"))
        self.label_4.setText(self._translate("ProjectLexusDebugScreen", "YAPAY ZEKA GORUNTUSU"))
        self.label_5.setText(self._translate("ProjectLexusDebugScreen", "LOG"))
        self.label_6.setText(self._translate("ProjectLexusDebugScreen", "TESPIT EDILEN OBJELER"))
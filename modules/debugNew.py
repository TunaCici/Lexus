# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'debug.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtTest
from PIL import Image
from PIL.ImageQt import ImageQt
import os
import glob
import stat
import sys

if __name__ == "modules." + os.path.basename(__file__)[:-3]:
    # importing from outside the package
    from modules import config
    from modules import camera
    from modules import logger
    from modules import voice_command
    from modules import ai
else:
    # importing from main and inside the package
    import config
    import camera
    import logger
    import voice_command
    import ai


class DebugScreen(object):
    def ai_start(self):
        if config.AI_RUNNING == True:
            self.ai_obj = ai.Lexus_AI()
            self.item6.setText(self._translate("ProjectLexusDebugScreen", "YAPAY ZEKA : ACIK"))

    def voice_start(self):
        self.voice_obj = voice_command.VoiceCommander()

        if config.is_playing == True:
            self.item4.setText(self._translate("ProjectLexusDebugScreen", "SES : ACIK"))
    
    def logger_start(self):
        if config.IS_LOGGER_RUNNING == True:
            logger.LexusLogger()

        self.file_log = open(config.PROJECT_DIR + "/logs/lexuslogfile.txt",encoding='utf-8')
    
    def save_function(self):
        try:
            self.obje.save()

        except:
            print("Camera is not opened.")

    def start(self):
        config.CAMERA_RUNNING = True
        config.IS_LOGGER_RUNNING = True
        config.is_playing = True

        self.item1.setText(self._translate("ProjectLexusDebugScreen", "KAMERA :  ACIK"))
        self.item4.setText(self._translate("ProjectLexusDebugScreen", "SES : ACIK"))
        self.obje = camera.Camera()
        self.voice_start()
        self.ai_start()
        self.update()
    
    def close(self):
        try:
            config.CAMERA_RUNNING = False
            config.IS_LOGGER_RUNNING = False
            config.is_playing = False
            self.item1.setText(self._translate("ProjectLexusDebugScreen", "KAMERA :  DEVRE DISI"))
            self.item4.setText(self._translate("ProjectLexusDebugScreen", "SES : DEVRE DISI"))
            self.item6.setText(self._translate("ProjectLexusDebugScreen", "YAPAY ZEKA : DEVRE DISI"))

            self.obje.videoCaptureObject.release()
            
            self.obje.photo_no = 0

            self.i = 0
            config.LINE_NUMBER = 0

            self.logger.clear()

            self.file_log.close()
    
        except:
            print("An Error Occured...")

        try:
            self.files = glob.glob(config.PROJECT_DIR + "/photos/")

            for file in self.files:
                os.chmod(file, mode=stat.S_IWRITE)
                os.remove(file)

        except PermissionError as p:
            print("Permission Error Occured...")

    def get_picture(self):
        return self.picture_list[-1]

    def update(self):
        while(config.CAMERA_RUNNING == True and config.IS_LOGGER_RUNNING == True and self.obje.photo_no != config.PHOTO_NUMBER + 1):
            self.obje.update()
            QtTest.QTest.qWait(100)

            self.ambulance = 0
            self.bench = 0
            self.bicycle = 0
            self.bus = 0
            self.car = 0
            self.cat = 0
            self.chair = 0
            self.couch = 0
            self.dog = 0
            self.motorcycle = 0
            self.person = 0
            self.stop_sign = 0
            self.taxi = 0
            self.traffic_light = 0
            self.traffic_sign = 0

            self.picture = self.obje.get_frame()

            self.picture,self.detection_list = self.ai_obj.update(self.picture)

            self.picture_list = list()
            self.picture_list.append(self.picture)
            
            height, width, channel = self.get_picture().shape
            bytesPerLine = 3 * width
            self.qImg = QtGui.QImage(self.get_picture().data, width, height, bytesPerLine, QtGui.QImage.Format_RGB888)

            self.camera.resize(config.RESIZE_X,config.RESIZE_Y)
            self.pixmap = QtGui.QPixmap(self.qImg)
            self.camera.setPixmap(self.pixmap)

            for i in self.detection_list:
                if i[0] == "ambulance":
                    self.ambulance = self.ambulance + 1

                if i[0] == "bench":
                    self.bench = self.bench + 1

                if i[0] == "bicycle":
                    self.bicycle = self.bicycle + 1

                if i[0] == "bus":
                    self.bus = self.bus + 1

                if i[0] == "car":
                    self.car = self.car + 1

                if i[0] == "cat":
                    self.cat = self.cat + 1

                if i[0] == "chair":
                    self.chair = self.chair + 1

                if i[0] == "couch":
                    self.couch = self.couch + 1

                if i[0] == "dog":
                    self.dog = self.dog + 1

                if i[0] == "motorcycle":
                    self.motorcycle = self.motorcycle + 1

                if i[0] == "person":
                    self.person = self.person + 1

                if i[0] == "stop sign":
                    self.stop_sign = self.stop_sign + 1

                if i[0] == "taxi":
                    self.taxi = self.taxi + 1

                if i[0] == "traffic light":
                    self.traffic_light = self.traffic_light + 1

                if i[0] == "traffic sign":
                    self.traffic_sign = self.traffic_sign + 1

            __sort = self.Objects.isSortingEnabled()
            self.Objects.setSortingEnabled(False)
            item = self.Objects.item(0)
            item.setText(self._translate("ProjectLeXuSDebugScreen", "AMBULANS : "))
            item1 = self.Objects.item(1)
            item1.setText(self._translate("ProjectLeXuSDebugScreen", "BANK : "))
            item2 = self.Objects.item(2)
            item2.setText(self._translate("ProjectLeXuSDebugScreen", "BISIKLET : "))
            item3 = self.Objects.item(3)
            item3.setText(self._translate("ProjectLeXuSDebugScreen", "OTOBUS : "))
            item4 = self.Objects.item(4)
            item4.setText(self._translate("ProjectLeXuSDebugScreen", "ARABA : "))
            item5 = self.Objects.item(5)
            item5.setText(self._translate("ProjectLeXuSDebugScreen", "KEDI : "))
            item6 = self.Objects.item(6)
            item6.setText(self._translate("ProjectLeXuSDebugScreen", "SANDALYE : "))
            item7 = self.Objects.item(7)
            item7.setText(self._translate("ProjectLeXuSDebugScreen", "KOLTUK : "))
            item8 = self.Objects.item(8)
            item8.setText(self._translate("ProjectLeXuSDebugScreen", "KOPEK : "))
            item9 = self.Objects.item(9)
            item9.setText(self._translate("ProjectLeXuSDebugScreen", "MOTORSIKLET : "))
            item10 = self.Objects.item(10)
            item10.setText(self._translate("ProjectLeXuSDebugScreen", "INSAN(LAR) : "))
            item11 = self.Objects.item(11)
            item11.setText(self._translate("ProjectLeXuSDebugScreen", "DUR LEVHASI : "))
            item12 = self.Objects.item(12)
            item12.setText(self._translate("ProjectLeXuSDebugScreen", "TAKSI : "))
            item13 = self.Objects.item(13)
            item13.setText(self._translate("ProjectLeXuSDebugScreen", "TRAFIK LEVHASI : "))
            item14 = self.Objects.item(14)
            item14.setText(self._translate("ProjectLeXuSDebugScreen", "TRAFIK LAMBASI : "))
            self.Objects.setSortingEnabled(__sort)


            QtTest.QTest.qWait(100)
            self.obje.photo_no = self.obje.photo_no + 1

            if self.obje.photo_no == config.PHOTO_NUMBER:
                self.obje.photo_no = 0
                self.obje.frame_list.clear()

            QtTest.QTest.qWait(100)

            self.logger_start()
            self.list_Lines = self.file_log.readlines()
            config.LINE_NUMBER = len(self.list_Lines)

            self.i = 0
            for i in range(config.LINE_NUMBER):
                self.logger.addItem(self.list_Lines[self.i])
                self.i = self.i + 1

    def goruntu_sec(self):
        try:
            self.filename = QtWidgets.QFileDialog.getOpenFileName(directory=config.PROJECT_DIR + "/photos/")
            self.path = self.filename[0]
            self.image = Image.open(self.path)
            self.image.show()

        except:
            print("No Picture Selected")

    def setupUi(self, ProjectLeXuSDebugScreen):
        ProjectLeXuSDebugScreen.setObjectName("ProjectLeXuSDebugScreen")
        ProjectLeXuSDebugScreen.resize(1037, 779)
        self.centralwidget = QtWidgets.QWidget(ProjectLeXuSDebugScreen)
        self.centralwidget.setObjectName("centralwidget")
        self.projectLogo = QtWidgets.QLabel(self.centralwidget)
        self.projectLogo.setGeometry(QtCore.QRect(720, 140, 301, 311))
        self.projectLogo.setObjectName("projectLogo")
        self.Sensors = QtWidgets.QListWidget(self.centralwidget)
        self.Sensors.setGeometry(QtCore.QRect(720, 0, 311, 141))
        self.Sensors.setObjectName("Sensors")
        item = QtWidgets.QListWidgetItem()
        self.Sensors.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Sensors.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Sensors.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Sensors.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Sensors.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Sensors.addItem(item)
        self.Objects = QtWidgets.QListWidget(self.centralwidget)
        self.Objects.setGeometry(QtCore.QRect(720, 460, 311, 291))
        self.Objects.setObjectName("Objects")
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.Objects.addItem(item)
        self.camera = QtWidgets.QLabel(self.centralwidget)
        self.camera.setGeometry(QtCore.QRect(0, 0, 521, 461))
        self.camera.setObjectName("camera")
        self.logger = QtWidgets.QListWidget(self.centralwidget)
        self.logger.setGeometry(QtCore.QRect(0, 460, 721, 291))
        self.logger.setObjectName("logger")
        self.logger.setStyleSheet("font-weight : bold")
        self.baslaButton = QtWidgets.QPushButton(self.centralwidget)
        self.baslaButton.setGeometry(QtCore.QRect(530, 0, 181, 71))
        self.baslaButton.setObjectName("baslaButton")
        self.baslaButton.pressed.connect(self.start)
        self.durButton = QtWidgets.QPushButton(self.centralwidget)
        self.durButton.setGeometry(QtCore.QRect(530, 90, 181, 71))
        self.durButton.setObjectName("durButton")
        self.durButton.pressed.connect(self.close)
        self.goruntuSecButton = QtWidgets.QPushButton(self.centralwidget)
        self.goruntuSecButton.setGeometry(QtCore.QRect(530, 180, 181, 71))
        self.goruntuSecButton.setObjectName("goruntuSecButton")
        self.goruntuSecButton.pressed.connect(self.goruntu_sec)
        self.saveButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveButton.setGeometry(QtCore.QRect(530, 270, 181, 71))
        self.saveButton.setObjectName("baslaButton")
        self.saveButton.pressed.connect(self.save_function)
        self.quitButton = QtWidgets.QPushButton(self.centralwidget)
        self.quitButton.setGeometry(QtCore.QRect(530, 360, 181, 71))
        self.quitButton.setObjectName("quitButton")
        ProjectLeXuSDebugScreen.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(ProjectLeXuSDebugScreen)
        self.statusbar.setObjectName("statusbar")
        ProjectLeXuSDebugScreen.setStatusBar(self.statusbar)

        self.retranslateUi(ProjectLeXuSDebugScreen)
        QtCore.QMetaObject.connectSlotsByName(ProjectLeXuSDebugScreen)

    def retranslateUi(self, ProjectLeXuSDebugScreen):
        self._translate = QtCore.QCoreApplication.translate
        ProjectLeXuSDebugScreen.setWindowTitle(self._translate("ProjectLeXuSDebugScreen", "Project LeXuS Debug Screen"))
        self.projectLogo.setText(self._translate("ProjectLeXuSDebugScreen", "Project LeXuS"))
        __sortingEnabled = self.Sensors.isSortingEnabled()
        self.Sensors.setSortingEnabled(False)
        self.item1 = self.Sensors.item(0)
        self.item1.setText(self._translate("ProjectLeXuSDebugScreen", "KAMERA : ACIK"))
        self.item2 = self.Sensors.item(1)
        self.item2.setText(self._translate("ProjectLeXuSDebugScreen", "SES : ACIK"))
        self.item3 = self.Sensors.item(2)
        self.item3.setText(self._translate("ProjectLeXuSDebugScreen", "TITRESIM : ACIK"))
        self.item4 = self.Sensors.item(3)
        self.item4.setText(self._translate("ProjectLeXuSDebugScreen", "YAPAY ZEKA : ACIK"))
        self.item5 = self.Sensors.item(4)
        self.item5.setText(self._translate("ProjectLeXuSDebugScreen", "UZAKLIK SENSORU : ACIK"))
        self.item6 = self.Sensors.item(5)
        self.item6.setText(self._translate("ProjectLeXuSDebugScreen", "KONTROLCU : ACIK"))
        self.Sensors.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.Objects.isSortingEnabled()
        self.Objects.setSortingEnabled(False)
        
        self.Objects.setSortingEnabled(__sortingEnabled)
        self.baslaButton.setText(self._translate("ProjectLeXuSDebugScreen", "BASLA"))
        self.durButton.setText(self._translate("ProjectLeXuSDebugScreen", "DUR"))
        self.goruntuSecButton.setText(self._translate("ProjectLeXuSDebugScreen", "GORUNTU SEC"))
        self.saveButton.setText(self._translate("ProjectLeXuSDebugScreen", "KAYDET"))
        self.quitButton.setText(self._translate("ProjectLeXuSDebugScreen", "KAPAT"))